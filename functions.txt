def fnabcd(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total
#1

def fnwxyz(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result
#1

def fn1234(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1
#1

def fn5678(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
#1

def fnabcd2(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1
#1

def fnwxyz2():
    while True:
        pass
#0

def fn1234_2():
    fn1234_2()
#0

def fn5678_2():
    n = 10
    while n > 0:
        print(n)
        n -= 1
    fn5678_2()
#0

def fnabcd3():
    a, b = 0, 1
    while True:
        print(a)
        a, b = b, a + b
#0

def fnwxyz3():
    import random
    while True:
        print(random.randint(1, 10))
#0

def fnasdf():
    a = 100
    while True:
        if a < 10:
            break
        a -= 1
#1

public static int fnabcd(int n) {
    int total = 0;
    for (int i = 1; i <= n; i++) {
        total += i;
    }
    return total;
}
#1

public static int fnwxyz(int n) {
    int result = 1;
    for (int i = 1; i <= n; i++) {
        result *= i;
    }
    return result;
}
#1

public static int fn1234(int[] arr, int target) {
    int low = 0;
    int high = arr.length - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}
#1

public static boolean fn5678(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i <= Math.sqrt(n); i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
#1

public static int fnabcd2(int[] arr, int target) {
    for (int i = 0; i < arr.length; i++) {
        if (arr[i] == target) {
            return i;
        }
    }
    return -1;
}
#1

public static void fnwxyz2() {
    while (true) {
        // Infinite loop
    }
}
#0

public static void fn1234_2() {
    fn1234_2();
}
#0

public static void fn5678_2() {
    int n = 10;
    while (n > 0) {
        System.out.println(n);
        n--;
    }
    fn5678_2();
}
#0

public static void fnabcd3() {
    int a = 0;
    int b = 1;
    while (true) {
        System.out.println(a);
        int temp = a;
        a = b;
        b = temp + b;
    }
}
#0

public static void fnwxyz3() {
    while (true) {
        System.out.println((int) (Math.random() * 10) + 1);
    }
}
#0

public static void fnasdf() {
    int a = 100;
    while (true) {
        if (a < 10) {
            break;
        }
        a--;
    }
}
#1